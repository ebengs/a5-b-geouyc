inches_tall = 68
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
stringone <- str_count(string1, "z")
stringtwo <- str_count(string2, "z")
if(stringone == 0 && stringtwo == 0) {
return("Neither string contains the letter z.")
}
else if (stringone == stringtwo) {
return("The strings have the same number of Zs.")
}
else if (stringone > stringtwo) {
return(string1)
}
else if (stringone < stringtwo) {
return(string2)
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zealous", "zoom")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vectorstrings){
x <- "0123456789"
gsub("[0-9]", replacement = "", x = vectorstrings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Joker", "her", "The Big Sick", "The Pursuit of Happyness", "Uncut Gems", "Inception")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!", sep="")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, by = 4)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %%8 == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(vectornums) {
sumvec <- list (length = length(vectornums),
mean = mean(vectornums),
median = median(vectornums))
sumvec
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
students <- c("Student "+ 1:100)
Student<-sprintf("Student %s", seq(1:1000))
Student<-c("Student %s", seq(1:1000))
Student<-sprintf("Student %s", seq(1:1000))
math_grades <- rnorm(1000, mean = 88, sd = 10)
math_grades
math_grades <- rnorm(1000, mean = 88, sd = 10, max = 100)
math_grades <- replace(math_grades, x> 100, 100)
math_grades <- replace(math_grades, math_grades> 100, 100)
math_grades
math_grades <- replace(math_grades, math_grades > 100, 100)
spanish_grades <- rnorm(1000, mean = 85, sd = 12)
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
students <- sprintf("Student %s", seq(1:1000))
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
grades
num_students <- nrow(grades)
num_students
num_courses <- ncol(grades - 1)
num_courses <- ncol(grades) - 1
grade_diff <- cbind(grades, grade_diff = students$math_grades - students$spanish_grades)
grade_diff <- cbind(grades, grade_diff = c(students$math_grades - students$spanish_grades))
grades$grades_diff <- (students$math_grades - students$spanish_grades)
grades$grades_diff <- (grades$math_grades - grades$spanish_grades
grades
grades
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- sprintf("Student %s", seq(1:1000))
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- rnorm(1000, mean = 88, sd = 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades <- replace(math_grades, math_grades > 100, 100)
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(1000, mean = 85, sd = 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades <- replace(spanish_grades, spanish_grades > 100, 100)
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `grades` minus one (b/c of their names)
num_courses <- ncol(grades) - 1
grades
grades$grade_diff <- (grades$math_grades - grades$spanish_grades)
grades
grades$better_at_math <- (grade_diff > 0)
grades$better_at_math <- (grades$grade_diff > 0)
grades
num_better_at_math <- nrow(grades$better_at_math == TRUE)
num_better_at_math
num_better_at_math <- sum(grades$better_at_math == TRUE)
num_better_at_math
is.data.frame(Titanic)
titanic_df <- data.frame(Titanic, stringsAsFactors = FALSE)
titanic_df
titanic_df
children <- titanic_df[titanic_df$Age == Child, ]
children <- titanic_df[titanic_df$Age == "Child", ]
children
num_children <- sum(children$Freq)
num_children
most_lost <- titanic_df[titanic_df$Survived == "No" && max(titanic_df$Freq)]
most_lost
most_lost <- titanic_df[titanic_df$Survived == "No"]
most_lost <- titanic_df[titanic_df$Survived == "No", ]
most_lost
most_lost <- people_passed[max(people_passed$Freq), ]
people_passed <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- people_passed[max(people_passed$Freq), ]
most_lost
most_lost <- people_passed[max(people_passed$Freq) ]
people_passed <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- people_passed[max(people_passed$Freq, na.rm = TRUE), ]
most_lost
people_passed
most_lost <- people_passed[max.col(people_passed$Freq)]
most_lost
most_lost <- people_passed[max(people_passed$Freq),]
most_lost
most_lost <- people_passed[which.max(people_passed$Freq),]
most_lost
people_passed <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- people_passed[people_passed$Freq == max(people_passed$Freq),]
most_lost
write.csv(grades, "data/grades.csv", row.names = FALSE)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass]
adults <- classpeople[classpeople$Age == "Adult"]
children <- classpeople[classpeople$Age == "Child"]
men <- adults[adults$Sex == "Male"]
women <- adults[adults$Sex == "Female"]
children_survived <- sum(children$Freq)
men_survived <- sum(men$Freq)
women_survived <- sum(women$Freq)
paste0("Of ", ticketclass, " class, ", children_survived )
}
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult"]
children <- classpeople[classpeople$Age == "Child"]
men <- adults[adults$Sex == "Male"]
women <- adults[adults$Sex == "Female"]
children_survived <- sum(children$Freq)
men_survived <- sum(men$Freq)
women_survived <- sum(women$Freq)
paste0("Of ", ticketclass, " class, ", children_survived )
}
survival_rate("Crew", titanic_df)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
children <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- sum(children$Freq)
men_survived <- sum(men$Freq)
women_survived <- sum(women$Freq)
paste0("Of ", ticketclass, " class, ", children_survived )
}
survival_rate("Crew", titanic_df)
View(titanic_df)
survival_rate("1st", titanic_df)
floor(145.56)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
children <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- children[children$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- round(sum(children_survived$Freq) + sum(women_survived$Freq) / sum(children$Freq) + sum(women$Freq), digits = 0)
men_percent <- round(sum(men_survived$Freq) / sum(men$Freq), digits = 0)
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and", men_percent, "% of men survived." )
}
survival_rate("1st", titanic_df)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
children <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- children[children$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- round((sum(children_survived$Freq) + sum(women_survived$Freq)) / (sum(children$Freq) + sum(women$Freq)), digits = 0)
men_percent <- round(((sum(men_survived$Freq)) / (sum(men$Freq))), digits = 0)
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and ", men_percent, "% of men survived." )
}
survival_rate("1st", titanic_df)
sum(children_survived$Freq)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
children <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- children[children$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- round((sum(children_survived$Freq) + sum(women_survived$Freq)) / (sum(children$Freq) + sum(women$Freq)), digits = 0)
men_percent <- round(((sum(men_survived$Freq)) / (sum(men$Freq))), digits = 0)
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and ", men_percent, "% of men survived." )
}
sum(children$Freq)
survival_rate("Crew", titanic_df)
sum(children$Freq) / 5
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
child <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- children[children$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- sum(children_survived$Freq + women_survived$Freq) / sum(children)
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and ", men_percent, "% of men survived." )
}
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
child <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- child[child$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- sum(children_survived$Freq + women_survived$Freq) / sum(child$Freq + women$Freq)
men_percent <- sum(men_survived$Freq) / sum(men$Freq)
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and ", men_percent, "% of men survived." )
}
survival_rate("1st", titanic_df)
survival_rate <- function(ticketclass, datafrm) {
classpeople <- datafrm[datafrm$Class == ticketclass,]
adults <- classpeople[classpeople$Age == "Adult",]
child <- classpeople[classpeople$Age == "Child",]
men <- adults[adults$Sex == "Male",]
women <- adults[adults$Sex == "Female",]
children_survived <- child[child$Survived == "Yes",]
men_survived <- men[men$Survived == "Yes",]
women_survived <- women[women$Survived == "Yes",]
children_women_percent <- children_survived$Freq + women_survived$Freq / child$Freq + women$Freq
men_percent <- men_survived$Freq / men$Freq
paste0("Of ", ticketclass, " class, ", children_women_percent, "% of women and children survived and ", men_percent, "% of men survived." )
}
survival_rate("1st", titanic_df)
setwd("~/GitHub/a5-b-geouyc")
shootings_2018 <- read.csv('data/shootings-2018.csv', stringsAsFactors = FALSE)
View(shootings_2018)
View(shootings_2018)
install.packages("stringr")
library(stringr)
shootings_2018$month <- str_extract(shootings_2018$date, "(//w+")
shootings_2018$month <- str_extract(shootings_2018$date, "(\\w+")
shootings_2018$month <- str_extract(shootings_2018$date, "\\w+")
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
library(ggplot2)
library(leaflet)
library(dplyr)
library(knitr)
library(tidyverse)
library(stringr)
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
shootings_2018 <- read.csv('data/shootings-2018.csv', stringsAsFactors = FALSE)
shootings_2018$num_victims <- (shootings_2018$num_killed + shootings_2018$num_injured)
shootings_2018$month <- str_extract(shootings_2018$date, "\\w+")
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
View(data_by_month)
View(data_by_month)
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed))
shootings_bargraph <- ggplot(data = data_by_month, aes(x = month, y = num_killed)) +
geom_bar(stat = "identity")
View(shootings_bargraph)
View(shootings_bargraph)
shootings_bargraph
shootings_bargraph <- ggplot(data = data_by_month, aes(x = month, y = killed)) +
geom_bar(stat = "identity")
shootings_bargraph
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed))
order <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
dbm_in_order <- data_by_month[match(order, data_by_month$month)]
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed))
order <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
dbm_in_order <- data_by_month[match(order, data_by_month$month),]
View(dbm_in_order)
View(dbm_in_order)
library(ggplot2)
library(leaflet)
library(dplyr)
library(knitr)
library(tidyverse)
library(stringr)
# Add to and edit the dataframe to include more relevant data
shootings_2018 <- read.csv('data/shootings-2018.csv', stringsAsFactors = FALSE)
shootings_2018$num_victims <- (shootings_2018$num_killed + shootings_2018$num_injured)
shootings_2018$month <- str_extract(shootings_2018$date, "\\w+")
# Calculate variables for the summary information paragraph
num_instances <- nrow(shootings_2018)
total_killed <- sum(shootings_2018$num_killed)
total_victims <- sum(shootings_2018$num_victims)
data_by_city <- shootings_2018 %>%
group_by(city) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
data_by_state <- shootings_2018 %>%
group_by(state) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
city_most_affected <- data_by_city[data_by_city$killed == max(data_by_city$killed), "city"]
num_most_affected <- data_by_city[data_by_city$killed == max(data_by_city$killed), "killed"]
state_most_victims <- data_by_state[data_by_state$victims == max(data_by_state$victims), "state"]
num_most_victims <- data_by_state[data_by_state$victims == max(data_by_state$victims), "victims"]
# Variables for the incident description paragraph
incident_date <- shootings_2018[33,1]
incident_state <- shootings_2018[33,2]
incident_city <- shootings_2018[33,3]
incident_address <- shootings_2018[33,4]
incident_killed <- shootings_2018[33,5]
# Create the interactive map with markers portraying incident address and the number of people killed
interactive_map <- leaflet(shootings_2018) %>%
addTiles() %>%
addCircleMarkers(lng = shootings_2018$long, lat = shootings_2018$lat,
popup = paste0("City: ", shootings_2018$city, "<br/>Number of People Injured: ", shootings_2018$num_injured
, "<br/>Number of People Killed: ", shootings_2018$num_killed),
radius = shootings_2018$num_victims)
# Create dataframe of data by month and create graph of killings by month
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed))
order <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
dbm_in_order <- data_by_month[match(order, data_by_month$month),]
shootings_bargraph <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
dbm_in_order <- data_by_month[match(order, data_by_month$month),]
shootings_bargraph <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme_minimal()
dbm_in_order
shootings_bargraph <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme_minimal()
shootings_bargraph
bargraph_shootings <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme_minimal()
View(data_by_month)
View(data_by_month)
View(dbm_in_order)
View(dbm_in_order)
# This is my R script 'analysis' where all the plots are made and the analysis is done
library(ggplot2)
library(leaflet)
library(dplyr)
library(knitr)
library(tidyverse)
library(stringr)
# Add to and edit the dataframe to include more relevant data
shootings_2018 <- read.csv('data/shootings-2018.csv', stringsAsFactors = FALSE)
shootings_2018$num_victims <- (shootings_2018$num_killed + shootings_2018$num_injured)
shootings_2018$month <- str_extract(shootings_2018$date, "\\w+")
# Calculate variables for the summary information paragraph
num_instances <- nrow(shootings_2018)
total_killed <- sum(shootings_2018$num_killed)
total_victims <- sum(shootings_2018$num_victims)
data_by_city <- shootings_2018 %>%
group_by(city) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
data_by_state <- shootings_2018 %>%
group_by(state) %>%
summarise(
killed = sum(num_killed),
injured = sum(num_injured),
victims = sum(num_victims))
city_most_affected <- data_by_city[data_by_city$killed == max(data_by_city$killed), "city"]
num_most_affected <- data_by_city[data_by_city$killed == max(data_by_city$killed), "killed"]
state_most_victims <- data_by_state[data_by_state$victims == max(data_by_state$victims), "state"]
num_most_victims <- data_by_state[data_by_state$victims == max(data_by_state$victims), "victims"]
# Variables for the incident description paragraph
incident_date <- shootings_2018[33,1]
incident_state <- shootings_2018[33,2]
incident_city <- shootings_2018[33,3]
incident_address <- shootings_2018[33,4]
incident_killed <- shootings_2018[33,5]
# Create the interactive map with markers portraying incident address and the number of people killed
interactive_map <- leaflet(shootings_2018) %>%
addTiles() %>%
addCircleMarkers(lng = shootings_2018$long, lat = shootings_2018$lat,
popup = paste0("City: ", shootings_2018$city, "<br/>Number of People Injured: ", shootings_2018$num_injured
, "<br/>Number of People Killed: ", shootings_2018$num_killed),
radius = shootings_2018$num_victims)
# Create dataframe of data by month and create graph of killings by month
data_by_month <- shootings_2018 %>%
group_by(month) %>%
summarise(
killed = sum(num_killed))
order <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
dbm_in_order <- data_by_month[match(order, data_by_month$month),]
bargraph_shootings <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme_minimal()
bargraph_shootings <- ggplot(data = dbm_in_order, aes(x = month, y = killed)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme_minimal()
View(bargraph_shootings)
View(bargraph_shootings)
bargraph_shootings
